<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Greeting Card Website</title>
  <style>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Arial', sans-serif;
  background-color: #f0f0f0; /* Light gray background for body */
  color: #333;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
}

h1 {
  font-size: 2rem;
  margin-bottom: 20px;
  color: #333;
  text-align: center;
}

#card-content {
  background-image: url('/img/OIP.jpeg'); /* Background image for the card */
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
  padding: 30px;
  width: 100%; /* Full width on mobile */
  max-width: 400px; /* Limit the maximum width for desktop view */
  overflow: hidden; /* Prevent overflow */
}

.from, .to {
  font-size: 1.2rem;
  margin-bottom: 10px;
}

.message-scroll {
  max-height: 200px; /* Set max height for scrollable area */
  overflow-y: auto; /* Enable vertical scrolling */
  padding: 10px;
  border: 1px solid #ccc; /* Add border for visual separation */
  border-radius: 10px;
  background-color: rgba(255, 255, 255, 0.9); /* Light background for the message */
}

.message {
  font-size: 1rem;
  line-height: 1.5; /* Increase line height for readability */
}

/* Attachments styling */
.attachments {
  margin-top: 15px; /* Spacing between attachments */
  display: flex;
  flex-direction: column; /* Stack attachments vertically */
}

.attachment {
  display: flex;
  align-items: center;
  background: rgba(255, 255, 255, 0.8); /* Light background for attachments */
  border: 1px solid #ddd; /* Light border for definition */
  border-radius: 10px; /* Round edges for attachments */
  padding: 10px;
  margin-top: 5px; /* Spacing between each attachment */
  transition: transform 0.2s; /* Animation on hover */
}

.attachment:hover {
  transform: scale(1.02); /* Slightly scale up on hover */
}

.card-image {
  max-width: 100%;
  border-radius: 10px; /* Round edges for the image */
}

.sender-name {
  font-weight: bold;
  margin-top: 20px; /* Spacing above sender name */
  text-align: right; /* Align sender name to the right */
}

/* Media query for mobile-like experience on desktop */
@media (min-width: 768px) {
  #card-content {
    width: 100%; /* Make it full-width in mobile view */
    max-width: 400px; /* Set max width for mobile-like appearance */
  }

  h1 {
    font-size: 1.5rem; /* Adjust heading size */
  }
}

@media (max-width: 768px) {
  #card-content {
    height: 100vh; /* Full screen height for mobile */
    overflow-y: auto; /* Enable scrolling if content overflows */
  }
}


  </style>
<link rel="stylesheet" href="/css/card.css">
</head>
<body>

 
  <div id="card-content">
    <p class="from">From: <%= cardData.senderName %> (<%= cardData.senderCountry %>)</p>
    <p class="to">To: <%= cardData.receiverName %> (<%= cardData.receiverCountry %>)</p>
    <div class="message-scroll">
      <p class="message">Message: <%= cardData.message %></p>
    </div>

    <% if (cardData.imageUrl) { %>
      <div class="attachment">
        <img src="<%= cardData.imageUrl %>" alt="Card Image" class="card-image">
      </div>
    <% } %>
    <% if (cardData.voiceNoteUrl) { %>
      <div class="attachment">
        <audio controls>
          <source src="<%= cardData.voiceNoteUrl %>" type="audio/mpeg">
          Your browser does not support the audio element.
        </audio>
      </div>
    <% } %>
    <% if (cardData.selectedSong) { %>
      <div class="music-player">
        <h3>Background Music</h3>
        <p><%= cardData.selectedSong.name %> - <%= cardData.selectedSong.artist %></p>
        <audio id="background-music">
          <source src="<%= cardData.selectedSong.previewUrl %>" type="audio/mpeg">
          Your browser does not support the audio element.
        </audio>
    
        <div class="audio-controls">
          <button id="playPauseBtn" class="control-btn">
            <i class="fas fa-play"></i>
          </button>
          <button id="muteBtn" class="control-btn">
            <i class="fas fa-volume-up"></i>
          </button>
        </div>
      </div>
    <% } %>
  </div>

  <!-- Add this after your existing card content -->
  <div class="card-interactions">
    <!-- Emoji Reactions Section -->
    <div class="reactions-section">
      <div class="current-reactions" id="reactionsContainer">
        <!-- Reactions will be populated here -->
      </div>
      <div class="add-reaction">
        <button onclick="toggleEmojiPicker()" class="emoji-button">Add Reaction</button>
        <div id="emojiPicker" class="emoji-picker">
          <div class="emoji-grid">
            <!-- Common emojis -->
            <button onclick="addReaction('‚ù§Ô∏è')" class="emoji">‚ù§Ô∏è</button>
            <button onclick="addReaction('üëç')" class="emoji">üëç</button>
            <button onclick="addReaction('üòä')" class="emoji">üòä</button>
            <button onclick="addReaction('üéâ')" class="emoji">üéâ</button>
            <button onclick="addReaction('üëè')" class="emoji">üëè</button>
            <button onclick="addReaction('üôè')" class="emoji">üôè</button>
          </div>
        </div>
      </div>
    </div>
  
    <!-- Replies Section -->
    <div class="replies-section">
      <h3>Replies</h3>
      <div id="repliesContainer">
        <!-- Replies will be populated here -->
      </div>
      <div class="reply-form">
        <input type="text" id="replyUserName" placeholder="Your name" class="reply-input">
        <textarea id="replyMessage" placeholder="Write a reply..." class="reply-input"></textarea>
        <button onclick="submitReply()" class="reply-button">Send Reply</button>
      </div>
    </div>
  </div>
  
  
  

<script>
  const audio = document.getElementById('background-music');
  const playPauseBtn = document.getElementById('playPauseBtn');
  const muteBtn = document.getElementById('muteBtn');
  let isPlaying = false;

  // Play/Pause functionality
  playPauseBtn.addEventListener('click', () => {
    if (isPlaying) {
      audio.pause();
      playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
    } else {
      audio.play().catch(error => {
        console.log("Audio play failed:", error);
      });
      playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
    }
    isPlaying = !isPlaying;
  });

  // Mute functionality
  muteBtn.addEventListener('click', () => {
    audio.muted = !audio.muted;
    muteBtn.innerHTML = audio.muted ? 
      '<i class="fas fa-volume-mute"></i>' : 
      '<i class="fas fa-volume-up"></i>';
  });

  // Update play button when audio ends
  audio.addEventListener('ended', () => {
    isPlaying = false;
    playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
  });

  // Auto-play only after user interaction
  document.addEventListener('click', () => {
    if (!isPlaying && audio) {
      audio.play().catch(error => {
        console.log("Audio play failed:", error);
      });
      isPlaying = true;
      playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
    }
  }, { once: true });
</script>
<script>
  const cardId = '<%= cardData.id %>';
  
  // Fetch and display reactions
  async function fetchReactions() {
    try {
      const response = await fetch(`/card/${cardId}/reactions`);
      const reactions = await response.json();
      const container = document.getElementById('reactionsContainer');
      container.innerHTML = '';
      
      Object.entries(reactions).forEach(([emoji, users]) => {
        const div = document.createElement('div');
        div.className = 'reaction-item';
        div.innerHTML = `${emoji} ${users.length}`;
        container.appendChild(div);
      });
    } catch (error) {
      console.error('Error fetching reactions:', error);
    }
  }
  
  // Add reaction
  async function addReaction(emoji) {
    const userName = prompt('Enter your name:');
    if (!userName) return;
  
    try {
      await fetch(`/card/${cardId}/reactions`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ emoji, userName })
      });
      
      fetchReactions();
      toggleEmojiPicker();
    } catch (error) {
      console.error('Error adding reaction:', error);
    }
  }
  
  // Toggle emoji picker
  function toggleEmojiPicker() {
    const picker = document.getElementById('emojiPicker');
    picker.style.display = picker.style.display === 'none' ? 'block' : 'none';
  }
  
  // Fetch and display replies
  async function fetchReplies() {
    try {
      const response = await fetch(`/card/${cardId}/replies`);
      const replies = await response.json();
      const container = document.getElementById('repliesContainer');
      container.innerHTML = '';
      
      replies.forEach(reply => {
        const div = document.createElement('div');
        div.className = 'reply-item';
        div.innerHTML = `
          <strong>${reply.userName}</strong>
          <p>${reply.message}</p>
          <small>${new Date(reply.timestamp?.seconds * 1000).toLocaleString()}</small>
        `;
        container.appendChild(div);
      });
    } catch (error) {
      console.error('Error fetching replies:', error);
    }
  }
  
  // Submit reply
  async function submitReply() {
    const userName = document.getElementById('replyUserName').value;
    const message = document.getElementById('replyMessage').value;
    
    if (!userName || !message) {
      alert('Please enter both your name and message');
      return;
    }
  
    try {
      await fetch(`/card/${cardId}/replies`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userName, message })
      });
      
      document.getElementById('replyUserName').value = '';
      document.getElementById('replyMessage').value = '';
      fetchReplies();
    } catch (error) {
      console.error('Error submitting reply:', error);
    }
  }
  
  // Initial load
  fetchReactions();
  fetchReplies();
  
  // Refresh data periodically
  setInterval(fetchReactions, 10000);
  setInterval(fetchReplies, 10000);

  function toggleFullscreen(element) {
      if (!document.fullscreenElement) {
          // Enter fullscreen
          if (element.requestFullscreen) {
              element.requestFullscreen();
          } else if (element.webkitRequestFullscreen) { /* Safari */
              element.webkitRequestFullscreen();
          } else if (element.msRequestFullscreen) { /* IE11 */
              element.msRequestFullscreen();
          }
      } else {
          // Exit fullscreen
          if (document.exitFullscreen) {
              document.exitFullscreen();
          } else if (document.webkitExitFullscreen) { /* Safari */
              document.webkitExitFullscreen();
          } else if (document.msExitFullscreen) { /* IE11 */
              document.msExitFullscreen();
          }
      }
  }
  
  // Optional: Handle fullscreen change
  document.addEventListener('fullscreenchange', function() {
      const element = document.querySelector('.card-page');
      if (document.fullscreenElement) {
          element.style.backgroundColor = 'white';
          element.style.overflow = 'auto';
          element.style.padding = '20px';
          element.style.height = '100%';
      } else {
          element.style.backgroundColor = '';
          element.style.overflow = '';
          element.style.padding = '';
          element.style.height = '';
      }
  });
</script>

</body>
</html>
