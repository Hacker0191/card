<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Greeting Card Website</title>
  <link rel="stylesheet" href="/css/style.css"> <link rel="stylesheet" href="/css/button.css">
  <style>
    .song-result {
      padding: 10px;
      border: 1px solid #ddd;
      margin: 5px 0;
      display: flex;
      align-items: center;
      cursor: pointer;
    }
    
    .song-result:hover {
      background-color: #f5f5f5;
    }
    
    .song-result img {
      width: 40px;
      height: 40px;
      margin-right: 10px;
    }
    
    .song-preview {
      margin-left: auto;
    }
    
    #songResults {
      max-height: 300px;
      overflow-y: auto;
      border: 1px solid #ddd;
      border-top: none;
      display: none;
    }
    
    #songResults.show {
      display: block;
    }
    </style>
</head>
<body>
  <div id="container">
    <h1>&bull; Create Card &bull;</h1>
    <div class="underline"></div>
    
    <form id="greetingForm" action="/create-card" method="POST" enctype="multipart/form-data">
      <!-- Sender's Name -->
      <div class="name">
        <label for="senderName"></label>
        <input type="text" placeholder="Sender's Name" name="senderName" id="senderName" required>
      </div>
  
      <!-- Sender's Country -->
      <div class="email">
        <label for="senderCountry"></label>
        <input type="text" placeholder="Sender's Country" name="senderCountry" id="senderCountry" required>
      </div>
  
      <!-- Receiver's Name -->
      <div class="name">
        <label for="receiverName"></label>
        <input type="text" placeholder="Receiver's Name" name="receiverName" id="receiverName" required>
      </div>
  
      <!-- Receiver's Country -->
      <div class="email">
        <label for="receiverCountry"></label>
        <input type="text" placeholder="Receiver's Country" name="receiverCountry" id="receiverCountry" required>
      </div>
  
      <!-- Delivery Date and Time -->
      <div class="name" style="margin-bottom: 20px;">
        <label for="deliveryDate">DATE:</label>
        <input type="datetime-local" name="deliveryDate" id="deliveryDate" style="margin-top: 10px;" required>
      </div>
   
       
      <!-- Message -->
      <div class="message" style="margin-bottom: 20px;">
        <label for="message"></label>
        <textarea name="message" placeholder="Write your message" id="message" required></textarea>
        <div class="character-count" style="margin-top: -25px;">0 characters</div>
      </div>
  
      <!-- Select Theme -->
      <div class="message">
        <label for="theme"></label>
        <select id="theme" name="theme" size="1" required>
          <option value="default">Default</option>
          <optgroup label="Celebrations">
            <option value="christmas">Christmas (Beta)</option>
            <option value="newyear">New Year (Beta)</option>
            <option value="graduation">Graduation (Beta)</option>
            <option value="engagement">Engagement (Beta)</option>
            <option value="anniversary">Wedding Anniversary (Beta)</option>
            <option value="birthday">Birthday (Beta)</option>
            <option value="retirement">Retirement (Beta)</option>
          </optgroup>
          <optgroup label="Emotions">
            <option value="lover">Lover (Beta)</option>
            <option value="love">Love (Beta)</option>
            <option value="sorry">Sorry (Beta)</option>
            <option value="thankyou">Thank You (Beta)</option>
            <option value="getwell">Get Well Soon (Beta)</option>
            <option value="congratulations">Congratulations (Beta)</option>
            <option value="goodluck">Good Luck (Beta)</option>
          </optgroup>
          <optgroup label="Other">
            <option value="backtoschool">Back To School (Beta)</option>
          </optgroup>
        </select>
      </div>
  
     <!-- Update the song search section in your form -->
<div class="message">
  <label for="songSearch"></label>
  <input type="text" id="songSearch" placeholder="Search for a song">
  <div id="songResults"></div>
  <input type="hidden" id="selectedSong" name="selectedSong">
  
  <!-- Preview section -->
  <div id="selectedSongPreview" style="display: none; margin-bottom: 20px;">
    <div class="selected-song-info"></div>
    <audio id="previewAudio" controls></audio>
  </div>
</div>
  
    <!-- Toggle Button -->
<button type="button" id="toggleUploadButton">Show Upload Options &nbsp; <i class="fa-solid fa-chevron-down"></i></button>

<!-- Upload Options Container -->
<div id="uploadOptions" class="upload-options" style="display: none;">
  <!-- Image Upload -->
  <div class="message">
    <label for="image">Upload Image:</label>
    <input type="file" id="image" name="image" accept="image/*">
  </div>

  <!-- Voice Note Upload -->
  <div class="audio-recording">
    <label for="audio">Record Audio:</label><br>
    <button type="button" id="recordButton" class="record-button" style="margin-top: 10px;">
      <i class="fas fa-microphone"></i> Record Audio Note (Max 15s)
    </button>
    <div id="recordingStatus"></div>
    <audio id="audioPreview" controls style="display: none;"></audio>
    <input type="hidden" name="audioBlob" id="audioBlob">
  </div>

  <!-- Video Upload -->
  <div class="video-upload">
    <label for="video">Upload Video:</label>
    <input type="file" id="video" name="video" accept="video/*">
    <div id="videoPreview"></div>
  </div>
</div>

  
      <!-- Submit Button -->
      <div class="submit" style="text-align: center; margin-top: 30px;">
        <button type="submit" id="form_button">CREATE CARD</button>
      </div>
    </form>
  </div>
  

 
<script>
  let debounceTimeout;
  const songSearch = document.getElementById('songSearch');
  const songResults = document.getElementById('songResults');
  const selectedSong = document.getElementById('selectedSong');
  const selectedSongPreview = document.getElementById('selectedSongPreview');
  const previewAudio = document.getElementById('previewAudio');
  
  songSearch.addEventListener('input', (e) => {
    clearTimeout(debounceTimeout);
    const query = e.target.value;
    
    if (query.length > 2) {
      debounceTimeout = setTimeout(async () => {
        try {
          const response = await fetch(`/search-song?query=${encodeURIComponent(query)}`);
          const data = await response.json();
          
          if (data.error) {
            console.error('Search error:', data.error);
            return;
          }
          
          displaySongResults(data.tracks);
        } catch (error) {
          console.error('Error searching songs:', error);
        }
      }, 300);
    } else {
      songResults.innerHTML = '';
      songResults.classList.remove('show');
    }
  });
  
  function displaySongResults(tracks) {
    songResults.innerHTML = '';
    
    if (tracks && tracks.length > 0) {
      tracks.forEach(track => {
        const div = document.createElement('div');
        div.className = 'song-result';
        div.innerHTML = `
          <img src="${track.albumArt || '/placeholder-album.png'}" alt="${track.name}">
          <div>
            <div><strong>${track.name}</strong></div>
            <div>${track.artist}</div>
          </div>
          <button class="song-preview">Preview</button>
        `;
        
        div.addEventListener('click', () => {
          selectedSong.value = JSON.stringify(track);
          songSearch.value = `${track.name} - ${track.artist}`;
          songResults.classList.remove('show');
          
          // Update preview section
          selectedSongPreview.style.display = 'block';
          selectedSongPreview.querySelector('.selected-song-info').innerHTML = `
            <p>Selected: ${track.name} - ${track.artist}</p>
          `;
          previewAudio.src = track.previewUrl;
        });
        
        songResults.appendChild(div);
      });
      
      songResults.classList.add('show');
    }
  }
  
  // Close results when clicking outside
  document.addEventListener('click', (e) => {
    if (!e.target.closest('.name')) {
      songResults.classList.remove('show');
    }
  });
  </script>
  <script>
    // Character count
    const messageTextarea = document.getElementById('message');
    const charCount = document.querySelector('.character-count');
  
    messageTextarea.addEventListener('input', function() {
      const length = this.value.length;
      charCount.textContent = `${length} characters`;
    });
  
    // Audio Recording
    let mediaRecorder;
    let audioChunks = [];
    let recordingTimer;
    const recordButton = document.getElementById('recordButton');
    const recordingStatus = document.getElementById('recordingStatus');
    const audioPreview = document.getElementById('audioPreview');
    const audioBlobInput = document.getElementById('audioBlob');
  
    recordButton.addEventListener('click', async () => {
      if (mediaRecorder && mediaRecorder.state === 'recording') {
        stopRecording();
      } else {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
          startRecording(stream);
        } catch (err) {
          console.error('Error accessing microphone:', err);
          alert('Unable to access microphone');
        }
      }
    });
  
    function startRecording(stream) {
      audioChunks = [];
      mediaRecorder = new MediaRecorder(stream);
      
      mediaRecorder.ondataavailable = (event) => {
        audioChunks.push(event.data);
      };
  
      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
        const audioUrl = URL.createObjectURL(audioBlob);
        audioPreview.src = audioUrl;
        audioPreview.style.display = 'block';
        
        // Convert blob to base64 for form submission
        const reader = new FileReader();
        reader.readAsDataURL(audioBlob);
        reader.onloadend = () => {
          audioBlobInput.value = reader.result;
        };
      };
  
      let seconds = 15;
      recordingStatus.textContent = `Recording: ${seconds}s remaining`;
      
      recordingTimer = setInterval(() => {
        seconds--;
        recordingStatus.textContent = `Recording: ${seconds}s remaining`;
        if (seconds <= 0) {
          stopRecording();
        }
      }, 1000);
  
      mediaRecorder.start();
      recordButton.textContent = 'Stop Recording';
    }
  
    function stopRecording() {
      mediaRecorder.stop();
      clearInterval(recordingTimer);
      recordButton.textContent = 'Record Audio Message (Max 15s)';
      recordingStatus.textContent = '';
      mediaRecorder.stream.getTracks().forEach(track => track.stop());
    }
  
    // Video Upload Preview
    const videoInput = document.getElementById('video');
    const videoPreview = document.getElementById('videoPreview');
  
    videoInput.addEventListener('change', function(e) {
      const file = this.files[0];
      if (file) {
        // Check file size (50MB limit)
        if (file.size > 50 * 1024 * 1024) {
          alert('Video must be under 50MB');
          this.value = '';
          return;
        }
  
        // Check video duration
        const video = document.createElement('video');
        video.preload = 'metadata';
  
        video.onloadedmetadata = function() {
          window.URL.revokeObjectURL(video.src);
          if (video.duration > 10) {
            alert('Video must be 10 seconds or less');
            videoInput.value = '';
            videoPreview.innerHTML = '';
          }
        };
  
        video.src = URL.createObjectURL(file);
  
        // Show preview
        videoPreview.innerHTML = `
          <video controls style="max-width: 100%; margin-top: 10px;">
            <source src="${URL.createObjectURL(file)}" type="${file.type}">
          </video>
        `;
      }
    });

    const deliveryDateInput = document.getElementById('deliveryDate');
  
  // Get the current date and time in the correct format (YYYY-MM-DDTHH:MM)
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');

  // Set the min attribute to disable past dates
  const minDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
  deliveryDateInput.min = minDateTime;
  </script>

  <script src="/js/main.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

</body>
</html>